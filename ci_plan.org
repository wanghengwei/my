#+TITLE: 技术中心持续集成系统设计
#+AUTHOR: wanghengwei

* 用户
  - 这套系统当前定义的用户是软件开发人员。
  - 未来可能会加入自动发布的功能，因此测试人员是潜在用户。

* 需求
  用户的需求可以分为4类：自动化编译、代码分析、测试以及查看报告。
** 自动化编译
   这是保证代码正确性最基本的手段，除了检查代码是否能正确，还能避免让公共版本库中的代码对开发者的个人环境有依赖。
*** 每版本编译
    - 当提交代码到版本库时，触发一次编译；
    - 如果不能立刻开始编译（比如上次的工作还未完成），则放入队列中等待编译；
    # - 尽可能的快速，因此不清除上次的编译结果。
    - 如果编译失败，则项目状态应设置为失败，进行声音提示和图像提示（显示大面积红色图案）；
    - 如果编译成功，则将项目状态设置为成功；
    - 如果编译成功，但有警告，则项目状态应设置为成功但有警告，进行图像提示（显示大面积黄色图案）。
*** 计划编译
    - 能设置一个时间，每天到这个时间就开始编译；
    - 编译前拉取最新代码；
    - 编译前清除上一次的结果，采取重新编译的方式；
    - 可以手动发起。
** 静态代码分析
   这一步有两个目的，第一个是统一项目代码风格，第二个是找出潜在的代码缺陷。
*** 粗粒度代码分析
    - 发生在每版本编译成功之后（无论是否有警告）；
    - 尽可能快，因此仅仅执行代码风格检查；
    - 如果检查出问题，那么将项目状态设置为成功但有警告，进行图像提示。
*** 完全代码分析
    - 发生在计划编译成功之后（无论是否有警告）；
    - 检查内容应尽可能面面俱到，并且能够有过滤机制；
    # - 使用VC编译器内置功能和CppCheck同时检查；
    - 如果检查出问题，将项目状态设置为成功但有警告，进行图像提示。
** 测试
   这一步既是为了确保新提交的代码满足需求，也是为了确保以前的代码逻辑正确性不会被新代码破坏。
*** 冒烟测试
    - 在每版本编译成功后开始；
    - 尽量迅速结束；
    - 如果失败，则将项目状态设置为失败，并进行声音和图像提示。
*** 所有测试
    - 在计划编译成功后开始；
    - 可以手动开始；
    - 包括所有测试内容；
    - 如果失败，则将项目状态设置为失败，并进行声音和图像提示。
# ** 反馈
** 查看报告
   - 对于每次build，能查看其Log。
# *** 出现错误时获得声音提示
#     - 当每版本编译或冒烟测试测试失败时播放一段自定义的声音；
#     - 计划编译等定时执行的任务失败时无需播放（放了也没人听得到）。
# *** 出现错误或警告时获得视觉提示
#     - 当编译、代码分析或测试出错或警告时，在屏幕上以红色（错误）或黄色（警告）图像显示，图像面积要足够大。
   
   #+BEGIN_SRC plantuml :file test.png :cmdline -charset GBK
title 当前阶段用例图
:User: as user     
(每版本编译) as auto_build
(粗粒度代码分析) as style_check
(冒烟测试) as smoke_test
(完全代码分析) as code_analysis
(所有测试) as all_test
(计划编译) as schedule_build
(查看报告) as see_log
'(错误或警告时) as error_beep
'(错误时显示) as error_show
'(警告时显示) as warn_show
user -right-> auto_build
user -up-> style_check
user --> smoke_test
user -right-> schedule_build
user --> all_test
user -up-> code_analysis
user -left-> see_log
'user --> error_show
'user --> error_beep
'user --> warn_show

   #+END_SRC

   #+RESULTS:
   [[file:test.png]]

   
* 实现
** 每版本编译
   默认情况下Jenkins是每隔一段时间检查一次版本库是否有更新，如果在这段时间内有两次提交，那么就会错过一次编译动作，万一编译失败了就没法区分到底是谁的提交导致编译失败。因此，需要有一个机制，能使每次提交都会通知Jenkins去获取并编译。
*** 方案
    以下方案都是基于post-commit hook的：
    1. 按照Jenkins的svn插件文档所说的那样，指示Jenkins去获取特定版本然后编译。
       * 优点 :: 完美实现了需求
       * 缺点 :: 在Windows下实现比较麻烦
    2. 使用jenkins-cli工具，指示Jenkins去执行一次更新和编译。
       * 优点 :: 简单，不易出错
       * 缺点 :: 当有两次提交几乎同时发生时可能还是会无法区分
    目前先按照方案2来做。步骤如下：
    1. 安装jre
    2. 从CI服务器下载jenkins-cli.jar，放到svn服务器一个固定位置
    3. 在服务器版本库的hooks目录下加入名为post-commit.bat的文件：
       #+BEGIN_SRC bat
         C:\PATH_TO\java -jar D:\PATH_TO\jenkins-cli.jar -s http://192.168.2.183:8082 build BUILD_NAME -c
       #+END_SRC
       这里将路径都写对，然后将BUILD_NAME换成实际的项目的名字。-c参数使得在没有获得更新的情况下不要编译，看实际效果考虑是不是加上吧。
