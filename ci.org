#+TITLE: 持续集成实践
#+AUTHOR: 王恒炜
#+EMAIL: wanghengwei@h3d.com.cn

* 持续集成概念
** 什么是持续集成
   持续集成（或持续整合、Continuous integration, CI），一种软件工程流程，将所有工程师对于软件的工作副本，每天整合数次到公用主线上。通常还会搭配自动单元测试。
   除了自动化的单元测试，CI通常还会包含其它一些质量控制流程，比如集成测试、性能测试、静态代码分析等。
** 持续集成的目的
   保证软件质量，降低产品的发布成本。
** 持续集成最佳实践
*** 使用版本库
    这是进行持续集成的基本要求。
*** 自动化编译
    需要一个一键式脚本，不仅仅是编译出二进制文件，还包含了生成文档、网站、可分发的软件包（比如deb、rpm或msi等安装包）。
*** 测试
    一旦编译完成，应该立刻开始测试以保证当前编译出来的产品是正确的。
*** 经常提交代码
    应当每天都提交代码到主分支上，尽量减少冲突，尽量让出错时变化的代码量最少。
*** 每次提交都应当构建
    这个也是为了尽早发现问题。
*** 构建应当迅速
    这是个问题。如何能使项目尽快的编译完成？
* 使用Jenkins实现持续集成
  在我们的实际开发环境中，对一个项目的持续集成分为三部分：自动编译、测试以及静态代码分析。
** 自动编译
   自动编译是指当有新的代码提交到版本库时，或其它指定条件发生时（比如每天凌晨固定时间点）在服务器上执行编译。
*** 工作目录
    设置为默认即可。
*** 版本库
    填写SVN地址。注意需要填写用户名和密码。
*** 触发条件
    Jenkins可以定时轮询版本库。设置方式类似cron，比如每15分钟检查一次，就配置为 "H/15 * * * *" ，这是最常用的设置。
*** 构建命令
    对于VC项目，最简单的方式就是用MSBuild，不过Jenknis不直接支持，需要一个MSBuild插件。安装插件后在构建机器上设置好MSBuild的路径，然后就可以使用msbuild的命令行编译项目了。
    另外还可以使用CMake，也能很方便的用命令行来编译。
** 测试
   编译成功后应当立刻执行相关的测试，以保证提交的代码是正确的。
*** 工作目录
    为了测试而再次编译会很浪费时间和资源，因此可以使用编译步骤的工作目录。
*** 触发条件
    这一步是在编译成功后做。可以设置为编译成功后自动开始测试。
*** 命令
    实际上，测试步骤和构建步骤是一样的，只要最后一个命令返回值不是0，Jenkins就当作失败，不管是构建还是测试。因此，任何可执行的程序或脚本都能作为测试。
    目前在实践中使用的是CTest（CMake的组件）。如果测试未通过，需要去查看log才能知道哪个测试失败了。
** 静态代码分析
*** 目标
    - 语义分析
      分析潜在的bug
    - 代码风格
      统一代码规范
*** 工具
**** 语义分析
     - CppCheck
     - VC内置代码检查
       需要VS2012及之后的版本，可以用高版本的VS的MSBuild来检查低版本的工程。
**** 代码风格检查
*** 实施
    代码检查有如下特点：
    1. 不依赖于构建步骤
    2. 耗时久
    3. 可能会影响测试，比如VC内置代码检查会使用最新版的VC生成二进制文件。
    因此，代码检查步骤不使用构建步骤的工作目录，而是单独从版本库检出一份。
    VC内置代码检查使用如下命令行：
    #+BEGIN_SRC bat
      msbuild <Path_To_Solution> /p:RunCodeAnalysis=true /p:CodeAnalysisRuleSet="NativeRecommendedRules.ruleset" /t:ReBuild /m /v:q /NOLOGO /fileLogger /flp:Verbosity=quiet
    #+END_SRC
    这样在执行完构建后， 工作目录下就会有一个名为msbuild.log的文件，里面每一行就是一个编译警告。在实际中，很多警告是需要忽略的，因此做了个小工具能够读取这个log文件并美化、过滤信息。
    由于代码检查并不强制项目处于不能通过的状态，因此如果有分析出警告，那么应该将项目设置为 =unstable= 状态。这可以用Jenkins提供的CLI工具来做到：
    #+BEGIN_SRC bat
      run_analysis.bat || java -jar jenkins-cli.jar set-build-result unstable
    #+END_SRC
    这里假设 =run_analysis.bat= 是执行静态代码分析的脚本，并且当有警告时返回值不为0.
    
*** 执行计划
    1. 建议手动执行，这是因为对大项目，完整执行一次检查将会很慢。
    2. 应该单独维护一个目录，而不是像Test那样用Build的工作目录，这是因为Analysis不必依赖于Build步骤。
*** 代码分析报告过滤工具 AnalysisParser
**** 目的
     各种代码检查工具生成的log有如下问题：
     - 格式不统一
     - 可能有很多误报
     - 可能包含了不属于项目的源代码的警告
     因此，需要有一个工具来解析所有的log并过滤掉不需要的信息。
**** 功能
     - 格式化各种代码检查工具的log
     - 按照多种规则进行过滤
     - 当检查结果显示代码有问题时返回错误码1，没有任何问题时返回错误码0.
**** 用法
     MSBuildWarningParser启动时会读取当前工作路径（注意，不是exe所在路径）下的MSBuildWarningParser.ini配置文件。配置文件内容如下：
     #+BEGIN_SRC conf-unix
       # msbuild.log 所在的位置。相对于当前路径
       msbuild-log-path=msbuild.log
       # cppcheck.log 所在的位置
       cppcheck-log-path=cppcheck.log
       # 基础路径，用于将结果中的完整路径替换为相对路径
       base-dir=f:\workspace\rescheckmodule
       # 排除规则。语法如下：
       # PROJECT <regex> SOURCE <regex> DETAIL <regex>  WARNING_ID <regex>
       # PROJECT、SOURCE、DETAIL、WARNING_ID 这四块必须按顺序，但可以缺少某一种。
       # 可以有多个exclude
       exclude=SOURCE boost\\
       exclude=SOURCE microsoft visual studio
       exclude=SOURCE rapidxml
       exclude=SOURCE unit_test
       exclude=WARNING_ID (C4996|C6031)
     #+END_SRC
     这个工具应当在所有的代码分析工具执行完毕之后运行，并且根据返回值来决定是否将项目设置为unstable或执行其它操作。
* 现存的影响CI的问题
** 项目设置
  1. 不应该使用绝对路径作为输出路径。
  2. 项目应该有个根目录的概念，输出目录不能超过这个范围。

